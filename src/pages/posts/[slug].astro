---
import Layout from "../../layouts/Layout.astro";
import { contentfulClient } from "../../lib/contentful";
import type { BlogPost } from "../../lib/contentful";
import { marked } from "marked";
import "prismjs/themes/prism-tomorrow.css";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  function addPrismLanguageClasses(html: string) {
    return html.replace(
      /<pre><code( class="[^"]*")?>([\s\S]*?)<\/code><\/pre>/g,
      (match, classAttr, code) => {
        // Try to extract language from the code fence (e.g., ```js\n)
        const langMatch = code.match(/^([a-zA-Z0-9+-]+)\\n/);
        let lang = langMatch ? langMatch[1] : null;
        let cleanCode = lang ? code.replace(/^([a-zA-Z0-9+-]+)\\n/, "") : code;
        let langClass = lang ? ` class=\"language-${lang}\"` : classAttr || "";
        return `<pre><code${langClass}>${cleanCode}</code></pre>`;
      }
    );
  }

  const paths = await Promise.all(
    entries.items.map(async (entry) => ({
      params: { slug: entry.fields.slug },
      props: {
        title: entry.fields.title,
        date: entry.fields.publishDate,
        content: addPrismLanguageClasses(await marked(entry.fields.content)),
        tags: entry.fields.tags, // Ensure tags are fetched
      },
    }))
  );
  return paths;
}

const { title, date, content, tags } = Astro.props;
---

<Layout>
  <Fragment slot="head">
    <title>{title} | notes.kinokonoko.io</title>
  </Fragment>
  <main class="container max-w-3xl mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold mb-2">{title}</h1>
    <div class="flex flex-wrap items-center gap-2 mb-2">
      <span class="text-[var(--text-secondary)]">
        {new Date(date).toLocaleDateString()}| Tags:&nbsp;
      </span>
      {
        Array.isArray(tags) && tags.length > 0 ? (
          tags.map((tag, i) => (
            <>
              <a
                href={`/tags/${encodeURIComponent(tag.trim().toLowerCase())}/`}
                class="underline hover:text-blue-500 text-[var(--text-secondary)]"
                style="text-underline-offset: 2px; text-decoration-skip-ink: none;"
              >
                {tag}
              </a>
              {i < tags.length - 1 && (
                <span class="text-[var(--text-secondary)]">,&nbsp</span>
              )}
            </>
          ))
        ) : (
          <span class="text-[var(--text-secondary)]">None</span>
        )
      }
    </div>
    <article
      class="mt-8 prose prose-sm md:prose-base dark:prose-invert"
      set:html={content}
    />
  </main>
  <!-- Load Prism.js for client-side syntax highlighting -->
  <script
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"
    onload="Prism.highlightAll()"></script>
</Layout>
