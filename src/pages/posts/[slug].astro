---
import Layout from "../../layouts/Layout.astro";
import "../../styles/post.css";
import { contentfulClient, CATEGORIES } from "../../lib/contentful";
import type { BlogPost } from "../../lib/contentful";
import { generatePostOGImage } from "../../lib/og-generator";
import { marked } from "marked";
import "prismjs/themes/prism-tomorrow.css";

// Helper function to add Prism language classes
function addPrismLanguageClasses(html: string): string {
  // First, handle code blocks with syntax highlighting
  let processedHtml = html.replace(
    /<pre><code( class="[^"]*")?>([\s\S]*?)<\/code><\/pre>/g,
    (match, classAttr, code) => {
      let lang: string | null = null;

      const firstLine = code.split("\n")[0];
      const langMatch = firstLine.match(/^```?([a-zA-Z0-9+-]+)/);
      if (langMatch) {
        lang = langMatch[1];
        code = code.replace(/^```?[a-zA-Z0-9+-]+\n/, "");
      } else {
        if (
          code.includes("function") ||
          code.includes("const ") ||
          code.includes("let ")
        ) {
          lang = "javascript";
        } else if (code.includes("#include") || code.includes("int main(")) {
          lang = "cpp";
        } else if (
          code.includes("using System;") ||
          code.includes("namespace ")
        ) {
          lang = "csharp";
        }
      }

      const langClass = lang ? ` class="language-${lang}"` : classAttr || "";
      return `<pre><code${langClass}>${code}</code></pre>`;
    }
  );

  // Then, ensure all hyperlinks have underline styling but retain their original color
  processedHtml = processedHtml.replace(
    /<a(.*?)href="(.*?)"(.*?)>(.*?)<\/a>/g,
    '<a$1href="$2"$3 style="text-decoration: underline; text-underline-offset: 2px; text-decoration-skip-ink: none; color: inherit;">$4</a>'
  );

  return processedHtml;
}

// Get the slug from the URL params
const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect("/404");
}

// Fetch the specific post data
const entry = await contentfulClient.getEntries<BlogPost>({
  content_type: "blogPost",
  "fields.slug": slug,
  limit: 1,
});

if (!entry.items.length) {
  return Astro.redirect("/404");
}

const post = entry.items[0];

// Generate OG image for this blog post
let ogImagePath: string;
try {
  ogImagePath = await generatePostOGImage(post.fields.slug, post.fields.title);
} catch (error) {
  console.error(`Failed to generate OG image for ${slug}:`, error);
  ogImagePath = "/og-article.jpg"; // Fallback to static image
}

// Prepare the post data
const title = post.fields.title;
const date = post.fields.publishDate;
const content = addPrismLanguageClasses(await marked.parse(post.fields.content));
const tags = post.fields.tags;
const category = post.fields.category || "other";
const metaDescription = post.fields.metaDescription || `${title} - Read this blog post on notes.kinokonoko.io`;


// Helper function to get Japanese category label
function getCategoryLabel(categoryId: string): string {
  const categoryInfo = CATEGORIES.find((cat) => cat.id === categoryId);
  return categoryInfo ? categoryInfo.label : categoryId;
}
---

<Layout
  title={`${title} | notes.kinokonoko.io`}
  description={metaDescription}
  ogType="article"
  ogImage={ogImagePath}
>
  <Fragment slot="head">
    <!-- Import Prism CSS in the head -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.min.css"
    />
  </Fragment>
  <main class="main-post">
    <a href="/" class="back-link">‚Üê Back to posts</a>
    <h1 class="post-title">{title}</h1>
    <div class="post-date">
      {new Date(date).getFullYear()}/{
        (new Date(date).getMonth() + 1).toString().padStart(2, "0")
      }/{new Date(date).getDate().toString().padStart(2, "0")}&nbsp;|
      Category:&nbsp;
      <a
        href={`/categories/${category}/`}
        class="underline hover:text-blue-500"
        style="text-underline-offset: 2px; text-decoration-skip-ink: none;"
      >
        {getCategoryLabel(category)}
      </a>
      &nbsp;| Tags:&nbsp;
      {
        Array.isArray(tags) && tags.length > 0 ? (
          tags.map((tag, i) => (
            <>
              <a
                href={`/tags/${encodeURIComponent(tag.trim().toLowerCase())}/`}
                class="underline hover:text-blue-500"
                style="text-underline-offset: 2px; text-decoration-skip-ink: none;"
              >
                {tag}
              </a>
              {i < tags.length - 1 && <span>,&nbsp</span>}
            </>
          ))
        ) : (
          <span>None</span>
        )
      }
    </div>
    <article class="post-content" set:html={content} />
  </main>
  <!-- Load Prism.js and language components for client-side syntax highlighting -->
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js"></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-javascript.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-typescript.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-csharp.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-c.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-cpp.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-objectivec.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-swift.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-bash.min.js"
  ></script>
  <script
    is:inline
    src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js"
  ></script>
  <script is:inline>
    // Run highlighting once the DOM is fully loaded
    document.addEventListener("DOMContentLoaded", () => {
      Prism.highlightAll();
    });
  </script>
</Layout>
